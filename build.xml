<?xml version="1.0" encoding="UTF-8"?>
<project name="eSciDoc infrastructure admin tool - main build file" default="dist" basedir=".">

	<property environment="env" />
	<property file="etc/${user.name}.properties" />
	<property file="etc/project.properties" />

	<fileset id="libs" dir="${lib.dir}">
		<include name="**/*.jar" />
	</fileset>

	<path id="build.classpath">
		<pathelement path="${classpath}" />
		<fileset refid="libs" />
	</path>

	<target name="dist" depends="define-label, admin-jar">
		<copy todir="${dist.build.dir}" failonerror="false">
			<fileset dir="${bin.src.dir}" includes="**/*" />
			<fileset dir="${doc.src.dir}" includes="**/*" />
			<fileset dir="${etc.dir}" includes="admin-tool.properties" />
			<fileset dir="${etc.dir}" includes="escidoc-core.properties" />
			<fileset dir="${foxml-migration.src.dir}" />
			<fileset dir="license/" />
			<fileset file="${dist.build.dir}/${admin.jar.name}" />
		</copy>
		<zip destfile="${dist.build.dir}/escidoc-core-admin-${build.version}.zip">
			<zipfileset dir="${dist.build.dir}" prefix="escidoc-core-admin-${build.version}" />
		</zip>
	</target>

	<!-- Cleans the output folders -->
	<target name="clean" description="Cleans the output folders">
		<delete dir="${build.dir}" />
	</target>

	<!-- Creates the output folders -->
	<target name="prepare" description="Creates the output folders">
		<mkdir dir="${java.build.dir}" />
		<mkdir dir="${dist.build.dir}" />
		<mkdir dir="${main.jar.build.dir}" />
		<mkdir dir="${admin.jar.build.dir}" />
		<mkdir dir="${admin.jar.main.dir}" />
		<mkdir dir="${admin.jar.lib.dir}" />
	</target>

	<target name="build" depends="clean, prepare, compile, copy">
	</target>

	<!-- Compile -->
	<target name="compile" depends="prepare" description="Compile java classes">
		<javac destdir="${java.build.dir}" debug="on">
			<classpath refid="build.classpath" />
			<src path="${java.src.dir}" />
		</javac>
	</target>

	<!-- Copy -->
	<target name="copy" description="copy metadata-files">
		<copy todir="${java.build.dir}">
			<fileset dir="${etc.dir}" includes="**/log4j.*" />
		</copy>
		<copy todir="${java.build.dir}">
			<fileset dir="${etc.dir}" includes="**/admin-tool.properties" />
		</copy>
		<copy todir="${java.build.dir}">
			<fileset dir="${etc.dir}" includes="**/escidoc-core.properties" />
		</copy>
		<copy todir="${java.build.dir}">
			<fileset dir="${java.src.dir}" includes="**/*.xml" />
		</copy>
	</target>

	<target name="main-jar" depends="build">
		<copy todir="${main.jar.build.dir}">
			<fileset dir="${java.build.dir}" includes="de/**/*.class" excludes="**/test/**/*.class" />
		</copy>
		<delete dir="${main.jar.build.dir}/com" failonerror="false" />
		<copy todir="${main.jar.build.dir}">
			<fileset dir="${etc.dir}" includes="**/log4j.*" />
		</copy>
		<jar jarfile="${admin.jar.main.dir}/${main.jar.name}" basedir="${main.jar.build.dir}" />
	</target>

	<target name="admin-jar" depends="main-jar">
		<copy todir="${admin.jar.build.dir}">
			<fileset dir="${java.build.dir}" includes="**/*.class" excludes="**/test/**/*.class" />
			<fileset dir="${etc.dir}" includes="**/log4j.*" />

			<fileset dir="${java.src.dir}" includes="*.xml" />

		</copy>
		<delete failonerror="false">
			<fileset dir="${admin.jar.build.dir}/de" excludes="**/EscidocXsltFunctions.class" />
		</delete>
		<copy todir="${admin.jar.lib.dir}">
			<fileset dir="${lib.dir}" includes="**/*" excludes="**/test/**/*" />
		</copy>
		<jar jarfile="${dist.build.dir}/${admin.jar.name}" manifest="${metadata.src.dir}/Manifest.mf">
			<fileset dir="${admin.jar.build.dir}" includes="**/*" />
		</jar>
	</target>

	<target name="junit">
		<ant antfile="${src.bin.dir}/build-junit.xml" target="test-fail" dir="" />
	</target>

	<!-- 
		Compute build.version properties (which contains version number 
		and/or build number).
		The build.version property consist usally of version number and build
		numer (e.g. 1.1-build23). But this value could be over written by
		RELEASE_LABEL property. If RELEASE_LABEL is defined, than is this 
		value the only used label. 
		If you want to define a release build, which has only the version 
		number in the label, than define RELEASE_LABEL=1.x.
		If build number and version number undefined, than is are this 
		values set to HEAD.
		Use ${build.version} as version label in further scripts. 
	 -->
	<target name="define-label">
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
			<classpath>
				<pathelement location="lib/ant/ant-contrib-1.0b1.jar" />
			</classpath>
		</taskdef>
		<if>
			<isset property="RELEASE_LABEL" />
			<then>
				<echo>Using ${RELEASE_LABEL} as label</echo>
				<property name="build.version" value="${RELEASE_LABEL}" />
			</then>
			<else>
				<if>
					<isset property="env.BUILD_NUMBER" />
					<then>
						<echo>Using ${env.BUILD_NUMBER} as build number</echo>
						<property name="label-suffix" value="-build${env.BUILD_NUMBER}" />
					</then>
					<else>
						<echo>Using HEAD as default build number</echo>
						<property name="label-suffix" value="-buildHEAD" />
					</else>
				</if>
				<property name="build.version" value="${version}${label-suffix}" />
			</else>
		</if>
	</target>

</project>
